#!/usr/bin/python3

import argparse
import sys
import xml.dom.minidom
import zipfile
from shutil import copyfile
from subprocess import call
from tempfile import TemporaryDirectory

dbprint = None
qprint = None

class WritableODFContent:
    """ Encapsulates an opendocument file such that content can be extracted, modified, and rewritten without overwriting the original file."""
    def __init__(self, infile):
        self.tempd = TemporaryDirectory(prefix='formfill')
        self._dirname = self.tempd.name
        self._filename = self._dirname + "/substituted"

        zin = zipfile.ZipFile (infile, 'r')

        # Extract and parse the document
        self.doc = xml.dom.minidom.parseString(zin.read('content.xml'))

        # Copy all of the files _except_ content.xml
        zout = zipfile.ZipFile (self._filename, 'w')
        for item in zin.infolist():
            buffer = zin.read(item.filename)
            if (item.filename != 'content.xml'):
                zout.writestr(item, buffer)
        zin.close()
        self.zip = zout

    def __enter__(self):
        return self

    def __exit__(self, type, value, traceback):
        self.tempf.cleanup()

    def doc(self):
        """Returns the entire document tree."""
        return self.doc

    def fields(self):
        """Returns just the various form fields."""
        self.fields = self.doc.getElementsByTagName('form:text')
        return self.fields

    def filename(self):
        return self._filename

    def dirname(self):
        return self._dirname

    def writecontent(self):
        """Write out the document tree."""
        self.zip.writestr('content.xml', self.doc.toxml())
        self.zip.close()

def parseargs():
    parser = argparse.ArgumentParser()
    parser.add_argument('-f', '--file', required=True, help='File to parse')

    parser.add_argument('--printer', help='Print substituted file to the named printer')
    parser.add_argument('-o', '--outfile', help='Filename for output')
    parser.add_argument('-d', '--dump', action='store_true', help='Dump field element xml')
    parser.add_argument('-s', '--sub', '--substitute', action='append', help='Substitutions to make')
    parser.add_argument('-v', '--verbose', action='store_true', help='Be verbose')
    parser.add_argument('-q', '--quiet', action='store_true', help='Be quiet')

    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-e', '--edit', action='store_true', help='Open the substituted opendocument file')
    group.add_argument('-n', '--dry-run', action='store_true', help="Show substitutions made but don't actually write or print anything")
    group.add_argument('--od', '--opendocument', help='Output new opendocument file')
    group.add_argument('-p', '--print', action='store_true', help='Print substituted file directly to the default printer')
    group.add_argument('--pdf', action='store_true', help='Output PDF file')

    args = parser.parse_args()

    if args.printer and not args.print:
        parser.print_help()
        print("formfill: error: cannot specify --printer without -p/--print")
        exit(1)

    if args.verbose:
        def _dbprint(*dbargs):
            print(*dbargs)
    else:
        _dbprint = lambda *x: None
    global dbprint
    dbprint = _dbprint

    if args.quiet:
        _qprint = lambda *x: None
    else:
        def _qprint(*qargs):
            print(*qargs)
    global qprint
    qprint = _qprint

    return(args)

def main():
    args = parseargs()
    subs = {}
    if args.sub:
        for i in args.sub:
            n, v = i.split('=', 1)
            subs[n] = v

    o = WritableODFContent(args.file)
    fields = o.fields()

    if args.dump:
        print("Before substitutions:")
        for i in fields:
            print(i.toprettyxml())
            print('----------------------------')

    for i in fields:
        fieldname = i.getAttribute('form:name')
        oldval = i.getAttribute('form:current-value')
        dbprint("Found field {} with value {}".format(fieldname, oldval))
        if fieldname in subs:
            newval = subs[fieldname]
            qprint("Substituting {} in field {}".format(newval, fieldname))
            i.setAttribute('form:current-value', newval)
        else:
            qprint("No substitution provided for field {}; keeping current value {}".format(fieldname, oldval))

    if args.dump:
        print("\n\nAfter substitutions:")
        for i in fields:
            print(i.toprettyxml())
            print('----------------------------')

    if args.dry_run:
        print("Dry run; no processing done.")
        exit(0)

    o.writecontent()

    stdargs = ['libreoffice', '--headless', '-env:UserInstallation=file://' + o.dirname()]
    outdir = ['--outdir', o.dirname()]

    if args.edit:
        call(['libreoffice', o.filename()])

    if args.print:
        call(stdargs + ['--print-to-file', o.filename()])
        call(['lpr', '-o', 'Duplex=DuplexNoTumble', o.filename() + '.ps'])

    if args.printer:
        call(stdargs + ['libreoffice', '--headless', '--print-to-file'] + outdir + [o.filename()])
        call(['lpr', '-p', args.printer, '-o', 'Duplex=DuplexNoTumble', o.filename() + '.ps'])

    if args.pdf:
        pdfname = args.file.rsplit('.', 1)[0] + ".pdf"
        if args.outfile:
            pdfname = args.outfile
        call(stdargs + ['--convert-to', 'pdf'] + outdir + [o.filename()])
        call(['ls', '-l', o.dirname()])
        copyfile(o.dirname() + "/substituted.pdf", pdfname)


if __name__=='__main__':
    main()
